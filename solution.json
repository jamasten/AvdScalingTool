{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.170.59819",
      "templateHash": "6444375603464913283"
    }
  },
  "parameters": {
    "azureBlobsPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for Azure Blobs."
      }
    },
    "azureFilesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for Azure Files."
      }
    },
    "azureFunctionsPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for Azure Functions."
      }
    },
    "azureQueuesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for Azure Queues."
      }
    },
    "azureTablesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for Azure Tables."
      }
    },
    "beginPeakTime": {
      "type": "string",
      "defaultValue": "08:00",
      "allowedValues": [
        "00:00",
        "01:00",
        "02:00",
        "03:00",
        "04:00",
        "05:00",
        "06:00",
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00",
        "19:00",
        "20:00",
        "21:00",
        "22:00",
        "23:00"
      ],
      "metadata": {
        "description": "The time of day when the peak period begins."
      }
    },
    "delegatedSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the target subnet delegated for outbound access for the function app."
      }
    },
    "endPeakTime": {
      "type": "string",
      "defaultValue": "17:00",
      "allowedValues": [
        "00:00",
        "01:00",
        "02:00",
        "03:00",
        "04:00",
        "05:00",
        "06:00",
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00",
        "19:00",
        "20:00",
        "21:00",
        "22:00",
        "23:00"
      ],
      "metadata": {
        "description": "The time of day when the peak period ends."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the target environment."
      }
    },
    "hostPoolName": {
      "type": "string",
      "metadata": {
        "description": "The name of the AVD host pool."
      }
    },
    "hostPoolResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group containing the AVD host pool."
      }
    },
    "identifier": {
      "type": "string",
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between each business unit or project supporting AVD in your tenant. This is the unique naming component between each AVD stamp."
      }
    },
    "keyExpirationInDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The number days before the key expires. The key will be rotated before it expires and is used to encrypt the storage account."
      }
    },
    "keyVaultPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the private DNS zone for the key vault."
      }
    },
    "limitSecondsToForceLogOffUser": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The number of seconds to wait before forcing a user to log off. This setting should only be used if session time limits are not managed on host."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The target location for the deployed resources."
      }
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the log analytics workspace for monitoring the resources in this solution."
      }
    },
    "minimumNumberOfRdsh": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The minimum number of session host VMs to keep running during off-peak hours. The scaling tool will not work if all virtual machines are turned off and the Start VM On Connect solution is not enabled."
      }
    },
    "privateEndpointsSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the subnet for the private endpoints."
      }
    },
    "privateLinkScopeResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the Azure Monitor Private Link Scope."
      }
    },
    "sessionHostsResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group containing the AVD session hosts."
      }
    },
    "sessionThresholdPerCPU": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureChina": {
        "chinaeast": {
          "abbreviation": "cne",
          "recoveryServicesGeo": "sha",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinaeast2": {
          "abbreviation": "cne2",
          "recoveryServicesGeo": "sha2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth": {
          "abbreviation": "cnn",
          "recoveryServicesGeo": "bjb",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth2": {
          "abbreviation": "cnn2",
          "recoveryServicesGeo": "bjb2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        }
      },
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc",
          "timeDifference": "+2:00",
          "timeZone": "Israel Standard Time"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea",
          "timeDifference": "+8:00",
          "timeZone": "Singapore Standard Time"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        }
      },
      "USNat": {
        "usnateast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "exe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usnatwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "exw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      },
      "USSec": {
        "usseceast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "rxe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "ussecwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "rxw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      }
    },
    "$fxv#1": {
      "actionGroups": "ag",
      "applicationInsights": "appi",
      "appServicePlans": "asp",
      "diagnosticSettings": "diag",
      "functionApps": "fa",
      "functions": "func",
      "keyVaults": "kv",
      "networkInterfaces": "nic",
      "privateEndpoints": "pe",
      "smartDetectorAlertRules": "sdar",
      "storageAccounts": "st",
      "userAssignedIdentities": "uami"
    },
    "$fxv#2": "# This file enables modules to be automatically managed by the Functions service.\r\n# See https://aka.ms/functionsmanageddependency for additional information.\r\n#\r\n@{\r\n    # For latest supported version, go to 'https://www.powershellgallery.com/packages/Az'. \r\n    # To use the Az module in your function app, please uncomment the line below.\r\n    # 'Az' = '7.*'\r\n}",
    "$fxv#3": "param($Timer)\n\ntry\n{\n\t[string]$BeginPeakTime = $env:BeginPeakTime\n\t[string]$EndPeakTime = $env:EndPeakTime\n\t[string]$EnvironmentName = $env:EnvironmentName\n\t[string]$HostPoolName = $env:HostPoolName\n\t[string]$HostPoolResourceGroupName = $env:HostPoolResourceGroupName\n\t[int]$LimitSecondsToForceLogOffUser = $env:LimitSecondsToForceLogOffUser\n\t[string]$LogOffMessageBody = $env:LogOffMessageBody\n\t[string]$LogOffMessageTitle = $env:LogOffMessageTitle\n\t[string]$MaintenanceTagName = $env:MaintenanceTagName\n\t[int]$MinimumNumberOfRDSH = $env:MinimumNumberOfRDSH\n\t[string]$ResourceManagerUrl = $env:ResourceManagerUrl\n\t[double]$SessionThresholdPerCPU = $env:SessionThresholdPerCPU\n\t[string]$SubscriptionId = $env:SubscriptionId\n\t[string]$TenantId = $env:TenantId\n\t[string]$TimeDifference = $env:TimeDifference\n\t[string[]]$DesiredRunningStates = @('Available', 'NeedsAssistance')\n\t[string[]]$TimeDiffHrsMin = \"$($TimeDifference):0\".Split(':')\n\n\n\t#region Functions\n\tfunction Get-LocalDateTime\n    {\n\t\treturn (Get-Date).ToUniversalTime().AddHours($TimeDiffHrsMin[0]).AddMinutes($TimeDiffHrsMin[1])\n\t}\n\n\tfunction Write-Log \n    {\n\t\t[CmdletBinding()]\n\t\tparam (\n\t\t\t[Parameter(Mandatory = $false)]\n\t\t\t[switch]$Err,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$Message,\n\n\t\t\t[Parameter(Mandatory = $false)]\n\t\t\t[switch]$Warn\n\t\t)\n\n\t\t[string]$MessageTimeStamp = (Get-LocalDateTime).ToString('yyyy-MM-dd HH:mm:ss')\n\t\t$Message = \"[$($MyInvocation.ScriptLineNumber)] [$($HostPoolName)] $Message\"\n\t\t[string]$WriteMessage = \"[$($MessageTimeStamp)] $Message\"\n\n\t\tif ($Err)\n        {\n\t\t\tWrite-Error $WriteMessage\n\t\t\t$Message = \"ERROR: $Message\"\n\t\t}\n\t\telseif ($Warn)\n        {\n\t\t\tWrite-Warning $WriteMessage\n\t\t\t$Message = \"WARN: $Message\"\n\t\t}\n\t\telse \n        {\n\t\t\tWrite-Output $WriteMessage\n\t\t}\n\t}\n\n\tfunction Set-nVMsToStartOrStop \n    {\n\t\tparam (\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolName,\n\n\t\t\t[Parameter(Mandatory = $false)]\n\t\t\t[switch]$InPeakHours,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[int]$MaxUserSessionsPerVM,\n\t\t\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[int]$nRunningCores,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[int]$nRunningVMs,\n\t\t\t\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[int]$nUserSessions,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[hashtable]$Res\n\t\t)\n\n\t\t# check if need to adjust min num of running session hosts required if the number of user sessions is close to the max allowed by the min num of running session hosts required\n\t\t[double]$MaxUserSessionsThreshold = 0.9\n\t\t[int]$MaxUserSessionsThresholdCapacity = [math]::Floor($MinimumNumberOfRDSH * $MaxUserSessionsPerVM * $MaxUserSessionsThreshold)\n\t\tif ($nUserSessions -gt $MaxUserSessionsThresholdCapacity)\n        {\n\t\t\t$MinimumNumberOfRDSH = [math]::Ceiling($nUserSessions / ($MaxUserSessionsPerVM * $MaxUserSessionsThreshold))\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of user sessions is more than $($MaxUserSessionsThreshold * 100) % of the max number of sessions allowed with minimum number of running session hosts required ($MaxUserSessionsThresholdCapacity). Adjusted minimum number of running session hosts required to $MinimumNumberOfRDSH\"\n\t\t}\n\n\t\t# Check if minimum number of session hosts are running\n\t\tif ($nRunningVMs -lt $MinimumNumberOfRDSH)\n        {\n\t\t\t$res.nVMsToStart = $MinimumNumberOfRDSH - $nRunningVMs\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of running session host is less than minimum required. Need to start $($res.nVMsToStart) VMs\"\n\t\t}\n\t\t\n\t\tif ($InPeakHours)\n        {\n\t\t\t[double]$nUserSessionsPerCore = $nUserSessions / $nRunningCores\n\t\t\t# In peak hours: check if current capacity is meeting the user demands\n\t\t\tif ($nUserSessionsPerCore -gt $SessionThresholdPerCPU)\n            {\n\t\t\t\t$res.nCoresToStart = [math]::Ceiling(($nUserSessions / $SessionThresholdPerCPU) - $nRunningCores)\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"[In peak hours] Number of user sessions per Core is more than the threshold. Need to start $($res.nCoresToStart) cores\"\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\n\t\tif ($nRunningVMs -gt $MinimumNumberOfRDSH)\n        {\n\t\t\t# Calculate the number of session hosts to stop\n\t\t\t$res.nVMsToStop = $nRunningVMs - $MinimumNumberOfRDSH\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"[Off peak hours] Number of running session host is greater than minimum required. Need to stop $($res.nVMsToStop) VMs\"\n\t\t}\n\t}\n\n\tfunction TryUpdateSessionHostDrainMode\n    {\n\t\t[CmdletBinding()]\n\t\tparam (\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[bool]$AllowNewSession,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[hashtable]$Header,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolResourceGroupName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$ResourceManagerUrl,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$SessionHostName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$SubscriptionId\n\t\t)\n\t\tBegin { }\n\t\tProcess \n        {\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Update session host '$SessionHostName' to set allow new sessions to $AllowNewSession\"\n\t\t\ttry \n\t\t\t{\n\t\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $SessionHostName + '?api-version=2022-02-10-preview'\n\t\t\t\tInvoke-RestMethod -Headers $Header -Body (@{properties = @{allowNewSession = $AllowNewSession}} | ConvertTo-Json) -Method 'Patch' -Uri $Uri | Out-Null\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Failed to update the session host '$SessionHostName' to set allow new sessions to $($AllowNewSession): $($PSItem | Format-List -Force | Out-String)\"\n\t\t\t}\n\t\t}\n\t\tEnd { }\n\t}\n\n\tfunction TryForceLogOffUser\n    {\n\t\t[CmdletBinding()]\n\t\tparam (\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[hashtable]$Header,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolResourceGroupName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$ResourceManagerUrl,\n\n\t\t\t[Parameter(Mandatory = $true, ValueFromPipeline = $true)]\n\t\t\t$Session,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$SubscriptionId\n\t\t)\n\t\tBegin { }\n\t\tProcess\n        {\n            [string[]]$Toks = $Session.Name.Split('/')\n            [string]$SessionHostName = $Toks[1]\n            [string]$SessionID = $Toks[-1]\n            [string]$User = $Session.ActiveDirectoryUserName\n\n\t\t\ttry \n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Force log off user: '$User', session ID: $SessionID\"\n\n\t\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $SessionHostName + '/userSessions/' + $SessionID + '?api-version=2022-02-10-preview&force=True'\n\t\t\t\tInvoke-RestMethod -Headers $Header -Method 'Delete' -Uri $Uri | Out-Null\n\t\t\t}\n\t\t\tcatch \n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Failed to force log off user: '$User', session ID: $SessionID $($PSItem | Format-List -Force | Out-String)\"\n\t\t\t}\n\t\t}\n\t\tEnd { }\n\t}\n\n\tfunction TryResetSessionHostDrainModeAndUserSessions\n    {\n\t\t[CmdletBinding()]\n\t\tparam (\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[hashtable]$Header,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$HostPoolResourceGroupName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$ResourceManagerUrl,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$SessionHostName,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[int]$SessionHostSessions,\n\n\t\t\t[Parameter(Mandatory = $true)]\n\t\t\t[string]$SubscriptionId\n\t\t)\n\t\tBegin { }\n\t\tProcess \n        {\n\t\t\tTryUpdateSessionHostDrainMode -AllowNewSession $true -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SessionHostName $SessionHostName -SubscriptionId $SubscriptionId\n\n\t\t\tif ($SessionHostSessions -eq 0)\n            {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Session host '$SessionHostName' still has $SessionHostSessions) sessions left behind in broker DB\"\n\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Get all user sessions from session host '$SessionHostName'\"\n\t\t\ttry \n\t\t\t{\n\t\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $SessionHostName + '/userSessions?api-version=2022-02-10-preview'\n\t\t\t\t$UserSessions = Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri\n\t\t\t}\n\t\t\tcatch \n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Failed to retrieve user sessions of session host '$SessionHostName': $($PSItem | Format-List -Force | Out-String)\"\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Force log off $($UserSessions.Count) users on session host: '$SessionHostName'\"\n\t\t\t$UserSessions | TryForceLogOffUser -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SubscriptionId $SubscriptionId\n\t\t}\n\t\tEnd { }\n\t}\n\t#endregion Functions\n\n\n\t# Note: https://stackoverflow.com/questions/41674518/powershell-setting-security-protocol-to-tls-1-2\n\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n\n\t#region Azure Authentication\n    $AccessToken = $null\n    try\n    {\n\t\t$TokenAuthURI = $env:IDENTITY_ENDPOINT + '?resource=' + $ResourceManagerUrl + '&api-version=2019-08-01'\n\t\t$TokenResponse = Invoke-RestMethod -Method Get -Headers @{\"X-IDENTITY-HEADER\"=\"$env:IDENTITY_HEADER\"} -Uri $TokenAuthURI\n\t\t$AccessToken = $TokenResponse.access_token\n\t\t$Header = @{\n\t\t\t'Content-Type'='application/json'\n\t\t\t'Authorization'='Bearer ' + $AccessToken\n\t\t}\n    }\n    catch\n    {\n        throw [System.Exception]::new('Failed to authenticate Azure with application ID, tenant ID, subscription ID', $PSItem.Exception)\n    }\n    Write-Log -HostPoolName $HostPoolName -Message \"Successfully authenticated with Azure using a managed identity\"\n\t#endregion Azure Authentication\n\n\n\t#region validate host pool, validate / update HostPool load balancer type, ensure there is at least 1 session host, get num of user sessions\n\t# Validate and get host pool info\n\t$HostPool = $null\n\ttry \n\t{\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Get host pool information\"\n\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '?api-version=2022-02-10-preview'\n\t\t$HostPool = Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri\n\n\t\tif (!$HostPool) \n\t\t{\n\t\t\tthrow $HostPool\n\t\t}\n\t}\n\tcatch \n\t{\n\t\tthrow [System.Exception]::new(\"Failed to get host pool info of '$HostPoolName' in resource group '$HostPoolResourceGroupName'. Ensure that you have entered the correct values\", $PSItem.Exception)\n\t}\n\n\t# Ensure HostPool load balancer type is not persistent\n\tif ($HostPool.properties.loadBalancerType -ieq 'Persistent')\n    {\n\t\tthrow \"HostPool '$HostPoolName' is configured with 'Persistent' load balancer type. Scaling tool only supports these load balancer types: BreadthFirst, DepthFirst\"\n\t}\n\n\tWrite-Log -HostPoolName $HostPoolName -Message 'Get session hosts'\n\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts?api-version=2022-02-10-preview'\n\t$SessionHosts = (Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri).value\n\n\tif (!$SessionHosts)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"There are no session hosts in the host pool '$HostPoolName'. Ensure that hostpool has session hosts\"\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'End'\n\t\treturn\n\t}\n\n\tWrite-Log -HostPoolName $HostPoolName -Message 'Get number of user sessions in host pool'\n\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/userSessions?api-version=2022-02-10-preview'\n\t[int]$nUserSessions = (Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri).value.Count\n\n\t# Set up breadth 1st load balacing type\n\t# Note: breadth 1st is enforced on AND off peak hours to simplify the things with scaling in the start/end of peak hours\n\tif (!$SkipUpdateLoadBalancerType -and $HostPool.properties.loadBalancerType -ine 'BreadthFirst')\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Update HostPool with 'BreadthFirst' load balancer type (current: '$($HostPool.properties.loadBalancerType)')\"\n\n\t\t$Body = @{\n\t\t\tproperties = @{\n\t\t\t\tloadBalancerType = 'BreadthFirst'\n\t\t\t}\n\t\t}\n\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '?api-version=2022-02-10-preview'\n\t\t$HostPool = Invoke-RestMethod -Headers $Header -Body $Body -Method 'Patch' -Uri $Uri\n\t}\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of session hosts in the HostPool: $($SessionHosts.Count)\"\n\t#endregion\n\t\n\n\t# region Peak Hours #\n\t# Convert local time, begin peak time & end peak time from UTC to local time\n\t$CurrentDateTime = Get-LocalDateTime\n\t$BeginPeakDateTime = [datetime]::Parse($CurrentDateTime.ToShortDateString() + ' ' + $BeginPeakTime)\n\t$EndPeakDateTime = [datetime]::Parse($CurrentDateTime.ToShortDateString() + ' ' + $EndPeakTime)\n\n\t# Adjust peak times to make sure begin peak time is always before end peak time\n\tif ($EndPeakDateTime -lt $BeginPeakDateTime)\n    {\n\t\tif ($CurrentDateTime -lt $EndPeakDateTime)\n        {\n\t\t\t$BeginPeakDateTime = $BeginPeakDateTime.AddDays(-1)\n\t\t}\n\t\telse\n        {\n\t\t\t$EndPeakDateTime = $EndPeakDateTime.AddDays(1)\n\t\t}\n\t}\n\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Using current time: $($CurrentDateTime.ToString('yyyy-MM-dd HH:mm:ss')), begin peak time: $($BeginPeakDateTime.ToString('yyyy-MM-dd HH:mm:ss')), end peak time: $($EndPeakDateTime.ToString('yyyy-MM-dd HH:mm:ss'))\"\n\n\t[bool]$InPeakHours = ($BeginPeakDateTime -le $CurrentDateTime -and $CurrentDateTime -le $EndPeakDateTime)\n\tif ($InPeakHours)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'In peak hours'\n\t}\n\telse\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'Off peak hours'\n\t}\n\t# endregion Peak Hours #\n\n\n\t#region get session hosts, VMs & user sessions info and compute workload\n\t# Note: session host is considered \"running\" if its running AND is in desired states AND allowing new sessions\n\t# Number of session hosts that are running, are in desired states and allowing new sessions\n\t[int]$nRunningVMs = 0\n\t# Number of cores that are running, are in desired states and allowing new sessions\n\t[int]$nRunningCores = 0\n\t# Array that contains all the virtual machine objects that are session hosts except the ones that are tagged for maintenance\n\t$VMs = @()\n\t# Object that contains the number of cores for each VM size SKU\n\t$VMSizeCores = @{}\n\t# Number of user sessions reported by each session host that is running, is in desired state and allowing new sessions\n\t[int]$nUserSessionsFromAllRunningVMs = 0\n\n\t# Populate all session hosts objects\n\tforeach ($SessionHost in $SessionHosts)\n    {\n\t\t[string]$VirtualMachineResourceId = $SessionHost.properties.resourceId\n\t\t[string]$VirtualMachineName = $VirtualMachineResourceId.Split('/')[8]\n\t\t[string]$VirtualMachineResourceGroupName = $VirtualMachineResourceId.Split('/')[4]\n\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $VirtualMachineResourceGroupName + '/providers/Microsoft.Compute/virtualMachines/' + $VirtualMachineName + '?api-version=2024-03-01&$expand=instanceView'\n\t\t$VirtualMachine = Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri\n\n\t\t# Throw an error if the virtual machine for the session host does not exist\n\t\tif ($VirtualMachine.error)\n\t\t{\n\t\t\tthrow \"The virtual machine for session host '$VirtualMachineName' does not exist\"\n\t\t}\n\t\t# Ignore session hosts tagged for maintenance or missing virtual machine\n\t\telseif($VirtualMachine.tags.Keys -contains $MaintenanceTagName)\n        {\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"VM '$VirtualMachineName' is in maintenance and will be ignored\"\n\t\t\tcontinue\n\t\t}\n\t\telse \n\t\t{\n\t\t\t$VMs += $VirtualMachine\n\t\t}\n\n\t\t$PowerState = $VirtualMachine.properties.instanceView.statuses[1].displayStatus\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Session host: '$($VirtualMachineName)', power state: '$PowerState', status: '$($SessionHost.properties.status)', update state: '$($SessionHost.properties.updateState)', sessions: $($SessionHost.properties.sessions), allow new session: $($SessionHost.properties.allowNewSession)\"\n\t\t\n\t\t# Get the number of cores for VM size SKU\n\t\tif (!$VMSizeCores.ContainsKey($VirtualMachine.properties.hardwareProfile.vmSize))\n        {\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Get VM sizes in $($VirtualMachine.location)\"\n\n\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId + '/providers/Microsoft.Compute/locations/' + $VirtualMachine.location + '/vmSizes?api-version=2024-03-01'\n\t\t\t$VMSizes = (Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri).value\n\n\t\t\tforeach ($VMSize in $VMSizes)\n            {\n\t\t\t\tif (!$VMSizeCores.ContainsKey($VMSize.name))\n                {\n\t\t\t\t\t$VMSizeCores.Add($VMSize.name, $VMSize.numberOfCores)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($PowerState -ieq 'VM running')\n        {\n\t\t\tif ($SessionHost.properties.status -notin $DesiredRunningStates)\n            {\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message 'VM is in running state but session host is not and so it will be ignored (this could be because the VM was just started and has not connected to broker yet)'\n\t\t\t}\n\t\t\tif (!$SessionHost.properties.allowNewSession)\n            {\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message 'VM is in running state but session host is not allowing new sessions and so it will be ignored'\n\t\t\t}\n\n\t\t\tif ($SessionHost.properties.status -in $DesiredRunningStates -and $SessionHost.properties.allowNewSession)\n            {\n\t\t\t\t++$nRunningVMs\n\t\t\t\t$nRunningCores += $VMSizeCores[$VirtualMachine.properties.hardwareProfile.vmSize]\n\t\t\t\t$nUserSessionsFromAllRunningVMs += $SessionHost.properties.sessions\n\t\t\t}\n\t\t}\n\t\telse \n        {\n\t\t\tif ($SessionHost.properties.status -in $DesiredRunningStates)\n            {\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"VM is not in running state but session host is (this could be because the VM was just stopped and broker doesn't know that yet)\"\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($nUserSessionsFromAllRunningVMs -ne $nUserSessions)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Sum of user sessions reported by every running session host ($nUserSessionsFromAllRunningVMs) is not equal to the total number of user sessions reported by the host pool ($nUserSessions)\"\n\t}\n\n\n\tif (!$nRunningCores)\n    {\n\t\t$nRunningCores = 1\n\t}\n\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of running session hosts: $nRunningVMs of total $($VMs.Count)\"\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of user sessions: $nUserSessions of total allowed $($nRunningVMs * $HostPool.properties.maxSessionLimit)\"\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Number of user sessions per Core: $($nUserSessions / $nRunningCores), threshold: $SessionThresholdPerCPU\"\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Minimum number of running session hosts required: $MinimumNumberOfRDSH\"\n\n\t# Check if minimum num of running session hosts required is higher than max allowed\n\tif ($VMs.Count -le $MinimumNumberOfRDSH)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message 'Minimum number of RDSH is set higher than or equal to total number of session hosts'\n\t}\n\t#endregion\n\n\n\t#region determine number of session hosts to start/stop if any\n\t# Now that we have all the info about the session hosts & their usage, figure how many session hosts to start/stop depending on in/off peak hours and the demand [Ops = operations to perform]\n\t$Ops = @{\n\t\tnVMsToStart   = 0\n\t\tnCoresToStart = 0\n\t\tnVMsToStop    = 0\n\t}\n\n\tSet-nVMsToStartOrStop -HostPoolName $HostPoolName -nRunningVMs $nRunningVMs -nRunningCores $nRunningCores -nUserSessions $nUserSessions -MaxUserSessionsPerVM $HostPool.properties.maxSessionLimit -InPeakHours:$InPeakHours -Res $Ops\n\t#endregion\n\n\n\t#region start any session hosts if need to\n\t# Check if we have any session hosts to start\n\tif ($Ops.nVMsToStart -or $Ops.nCoresToStart)\n    {\n\t\tif ($nRunningVMs -eq $VMs.Count)\n        {\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message 'All session hosts are running'\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message 'End'\n\t\t\treturn\n\t\t}\n\n\t\t# Object that contains names of session hosts that will be started\n\t\t# $StartSessionHostFullNames = @{ }\n\t\t# Array that contains jobs of starting the session hosts\n\t\t[array]$StartedVMs = @()\n\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'Find session hosts that are stopped and allowing new sessions'\n\t\tforeach ($SessionHost in $SessionHosts)\n        {\n\t\t\t$VM = $VMs | Where-Object { $_.id -ieq $SessionHost.properties.resourceId }\n\t\t\tif (!$Ops.nVMsToStart -and !$Ops.nCoresToStart)\n            {\n\t\t\t\t# Done with starting session hosts that needed to be\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif ($VM.properties.instanceView.statuses[1].displayStatus -ieq 'VM running')\n            {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif ($SessionHost.properties.updateState -ine 'Succeeded')\n            {\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Session host '$($VM.name)' may not be healthy\"\n\t\t\t}\n\n\t\t\tif (!$SessionHost.properties.allowNewSession)\n            {\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Session host '$($VM.name)' is not allowing new sessions and so it will not be started\"\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Start session host '$($VM.name)'\"\n\n\t\t\t$Uri = $ResourceManagerUrl + $VM.id.TrimStart('/') + '/start?api-version=2023-09-01'\n\t\t\tInvoke-RestMethod -Headers $Header -Method 'Post' -Uri $Uri | Out-Null\n\t\t\t$StartedVMs += $VM\n\t\t\t\t\n\t\t\t--$Ops.nVMsToStart\n\t\t\tif ($Ops.nVMsToStart -lt 0)\n            {\n\t\t\t\t$Ops.nVMsToStart = 0\n\t\t\t}\n\n\t\t\t$Ops.nCoresToStart -= $VMSizeCores[$VM.properties.hardwareProfile.vmSize]\n\t\t\tif ($Ops.nCoresToStart -lt 0)\n            {\n\t\t\t\t$Ops.nCoresToStart = 0\n\t\t\t}\n\t\t}\n\n\t\t# Check if there were enough number of session hosts to start\n\t\tif ($Ops.nVMsToStart -or $Ops.nCoresToStart)\n        {\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Not enough session hosts to start. Still need to start maximum of either $($Ops.nVMsToStart) VMs or $($Ops.nCoresToStart) cores\"\n\t\t}\n\n\t\t# Wait for session hosts to start\n\t\twhile($StartedVMs.Count -gt 0)\n\t\t{\n\t\t\tforeach($StartedVM in $StartedVMs)\n\t\t\t{\n\t\t\t\t$Uri = $ResourceManagerUrl + $StartedVM.id.TrimStart('/') + '?api-version=2024-03-01'\n\t\t\t\t$VMAgentStatus = (Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri).properties.instanceView.vmAgent\n\t\t\t\tif ($VMAgentStatus)\n\t\t\t\t{\n\t\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Session host '$($StartedVM.name)' is running\"\n\t\t\t\t\t$StartedVMs = $StartedVMs -ne $StartedVM\n\t\t\t\t}\n\t\t\t}\n\t\t\tStart-Sleep -Seconds 30\n\t\t}\n\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'All session hosts have started'\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'End'\n\t\treturn\n\t}\n\t#endregion\n\n\n\t#region stop any session hosts if need to\n\tif (!$Ops.nVMsToStop)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'No need to start/stop any session hosts'\n\t\tWrite-Log -HostPoolName $HostPoolName -Message 'End'\n\t\treturn\n\t}\n\n\t# Object that contains names of session hosts that will be stopped\n\t$VMsToStop = @()\n\t[array]$VMsToStopAfterLogOffTimeOut = @()\n\n\tWrite-Log -HostPoolName $HostPoolName -Message 'Find session hosts that are running and allowing new sessions, sort them by number of user sessions'\n\tforeach ($SessionHost in ($SessionHosts | Where-Object { $_.properties.allowNewSession } | Sort-Object { $_.properties.sessions }))\n    {\n\t\t$VM = $VMs | Where-Object { $_.id -ieq $SessionHost.properties.resourceId }\n\t\tif ($VM.properties.instanceView.statuses[1].displayStatus -ieq 'VM running')\n\t\t{\n\t\t\tif (!$Ops.nVMsToStop)\n\t\t\t{\n\t\t\t\t# Done with stopping session hosts that needed to be\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\tif ($SessionHost.properties.sessions -gt 0 -and !$LimitSecondsToForceLogOffUser)\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Session host '$($VM.name)' has $($SessionHost.properties.sessions) sessions but limit seconds to force log off user is set to 0, so will not stop any more session hosts (https://aka.ms/wvdscale#how-the-scaling-tool-works)\"\n\t\t\t\t# Note: why break ? Because the list this loop iterates through is sorted by number of sessions, if it hits this, the rest of items in the loop will also hit this\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\tTryUpdateSessionHostDrainMode -AllowNewSession $false -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SessionHostName $VM.name -SubscriptionId $SubscriptionId\n\n\t\t\t# Note: check if there were new user sessions since session host info was 1st fetched\n\t\t\tif ($SessionHost.properties.sessions -gt 0 -and !$LimitSecondsToForceLogOffUser)\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Session host '$($VM.name)' has $($SessionHost.properties.sessions) sessions but limit seconds to force log off user is set to 0, so will not stop any more session hosts (https://aka.ms/wvdscale#how-the-scaling-tool-works)\"\n\t\t\t\tTryUpdateSessionHostDrainMode -AllowNewSession $true -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SessionHostName $VM.name -SubscriptionId $SubscriptionId \n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif ($SessionHost.properties.sessions -gt 0)\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Get all user sessions from session host '$($VM.name)'\"\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $VM.name + '/userSessions?api-version=2022-02-10-preview'\n\t\t\t\t\t$UserSessions = Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri\n\t\t\t\t}\n\t\t\t\tcatch\n\t\t\t\t{\n\t\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Failed to retrieve user sessions of session host '$($VM.name)': $($PSItem | Format-List -Force | Out-String)\"\n\t\t\t\t}\n\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Send log off message to active user sessions on session host: '$($VM.name)'\"\n\t\t\t\tforeach ($UserSession in $UserSessions)\n\t\t\t\t{\n\t\t\t\t\tif($UserSession.properties.sessionState -ine 'Active')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\t[string]$SessionID = $UserSession.name.Split('/')[-1]\n\t\t\t\t\t[string]$User = $UserSession.properties.activeDirectoryUserName\n\t\t\t\t\t\n\t\t\t\t\ttry \n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Send a log off message to user: '$User', session ID: $SessionID\"\n\n\t\t\t\t\t\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $VM.name + '/userSessions/' + $SessionID + '/sendMessage?api-version=2022-02-10-preview'\n\t\t\t\t\t\tInvoke-RestMethod -Headers $Header -Method 'Post' -Uri $Uri -Body (@{ 'messageTitle' = $LogOffMessageTitle; 'messageBody' = \"$LogOffMessageBody You will be logged off in $LimitSecondsToForceLogOffUser seconds\" } | ConvertTo-Json) | Out-Null\n\t\t\t\t\t}\n\t\t\t\t\tcatch \n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Failed to send a log off message to user: '$User', session ID: $SessionID $($PSItem | Format-List -Force | Out-String)\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$VMsToStopAfterLogOffTimeOut += $VM\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Stop session host '$($VM.name)'\"\n\t\t\t\t$Uri = $ResourceManagerUrl + $VM.id.TrimStart('/') + '/deallocate?api-version=2023-09-01'\n\t\t\t\tInvoke-RestMethod -Headers $Header -Method 'Post' -Uri $Uri | Out-Null\n\t\t\t\t$VMsToStop += $VM\n\t\t\t}\n\n\t\t\t--$Ops.nVMsToStop\n\t\t\tif ($Ops.nVMsToStop -lt 0) {\n\t\t\t\t$Ops.nVMsToStop = 0\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($VMsToStopAfterLogOffTimeOut)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Wait $LimitSecondsToForceLogOffUser seconds for users to log off\"\n\n\t\tStart-Sleep -Seconds $LimitSecondsToForceLogOffUser\n\n\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Force log off users and stop remaining $($VMsToStopAfterLogOffTimeOut.Count) session hosts\"\n\t\tforeach ($VM in $VMsToStopAfterLogOffTimeOut)\n        {\n\t\t\t$SessionHost = $SessionHosts | Where-Object { $_.properties.resourceId -ieq $VM.id }\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Force log off $($SessionHost.sessions) users on session host: '$($VM.name)'\"\n\t\t\t$VM.UserSessions | TryForceLogOffUser -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SubscriptionId $SubscriptionId\n\t\t\t\n\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Stop session host '$($VM.name)'\"\n\t\t\t$Uri = $ResourceManagerUrl + $VM.id.TrimStart('/') + '/deallocate?api-version=2023-09-01'\n\t\t\tInvoke-RestMethod -Headers $Header -Method 'Post' -Uri $Uri | Out-Null\n\t\t\t$VMsToStop += $VM\n\t\t}\n\t}\n\n\t# Check if there were enough number of session hosts to stop\n\tif ($Ops.nVMsToStop)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Warn -Message \"Not enough session hosts to stop. Still need to stop $($Ops.nVMsToStop) VMs\"\n\t}\n\n\t# Wait for the session hosts to stop / deallocate\n\tWrite-Log -HostPoolName $HostPoolName -Message \"Wait for session hosts to stop / deallocate\"\n\twhile($VMsToStop.Count -gt 0)\n\t{\n\t\tforeach($VMToStop in $VMsToStop)\n\t\t{\n\t\t\t$Uri = $ResourceManagerUrl + $VMToStop.id.TrimStart('/') + '?$expand=instanceView&api-version=2024-03-01'\n\t\t\t$VMPowerState = (Invoke-RestMethod -Headers $Header -Method 'Get' -Uri $Uri).properties.instanceView.statuses[1].displayStatus\n\t\t\tif ($VMPowerState -eq 'VM deallocated')\n\t\t\t{\n\t\t\t\tWrite-Log -HostPoolName $HostPoolName -Message \"Session host '$($VMToStop.name)' is stopping\"\n\t\t\t\t$SessionHost = $SessionHosts | Where-Object { $_.properties.resourceId -ieq $VMToStop.id }\n\t\t\t\tTryResetSessionHostDrainModeAndUserSessions -Header $Header -HostPoolName $HostPoolName -HostPoolResourceGroupName $HostPoolResourceGroupName -ResourceManagerUrl $ResourceManagerUrl -SessionHostName $VMToStop.name -SessionHostSessions $SessionHost.properties.sessions -SubscriptionId $SubscriptionId\n\t\t\t\t$VMsToStop = $VMsToStop -ne $VMToStop\n\t\t\t}\n\t\t}\n\t\tStart-Sleep -Seconds 30\n\t}\n\n\tWrite-Log -HostPoolName $HostPoolName -Message 'All required session hosts have stopped.'\n\tWrite-Log -HostPoolName $HostPoolName -Message 'End'\n\treturn\n\t#endregion\n}\ncatch \n{\n\t$ErrContainer = $PSItem\n\t# $ErrContainer = $_\n\n\t[string]$ErrMsg = $ErrContainer | Format-List -Force | Out-String\n\t$ErrMsg += \"Version: $Version`n\"\n\n\tif (Get-Command 'Write-Log' -ErrorAction:SilentlyContinue)\n    {\n\t\tWrite-Log -HostPoolName $HostPoolName -Err -Message $ErrMsg -ErrorAction:Continue\n\t}\n\telse\n    {\n\t\tWrite-Error $ErrMsg -ErrorAction:Continue\n\t}\n\n\tthrow [System.Exception]::new($ErrMsg, $ErrContainer.Exception)\n}",
    "$fxv#4": "# Authentication is provided in the script",
    "applicationInsightsName": "[replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').applicationInsights)]",
    "appServicePlanName": "[replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').appServicePlans)]",
    "diagnosticsSettingName": "[replace(variables('namingConvention'), 'resourceType', format('{0}-subType', variables('resourceTypes').diagnosticSettings))]",
    "fileShareName": "function-app",
    "functionAppName": "[replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').functionApps)]",
    "functionName": "[replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').functions)]",
    "keyVaultName": "[replace(replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').keyVaults), '-', '')]",
    "locations": "[variables('$fxv#0')[environment().name]]",
    "namingConvention": "[format('{0}-resourceType-scaling-avd-{1}-{2}', parameters('identifier'), parameters('environmentAbbreviation'), variables('locations')[parameters('location')].abbreviation)]",
    "networkInterfaceName": "[replace(variables('namingConvention'), 'resourceType', format('{0}-subType', variables('resourceTypes').networkInterfaces))]",
    "privateEndpointName": "[replace(variables('namingConvention'), 'resourceType', format('{0}-subType', variables('resourceTypes').privateEndpoints))]",
    "privateLinkScopeResourceGroupName": "[if(empty(parameters('logAnalyticsWorkspaceResourceId')), subscription().id, split(parameters('privateLinkScopeResourceId'), '/')[4])]",
    "privateLinkScopeSubscriptionId": "[if(empty(parameters('logAnalyticsWorkspaceResourceId')), resourceGroup().name, split(parameters('privateLinkScopeResourceId'), '/')[2])]",
    "resourceTypes": "[variables('$fxv#1')]",
    "roleAssignments": "[if(equals(parameters('hostPoolResourceGroupName'), parameters('sessionHostsResourceGroupName')), createArray(parameters('hostPoolResourceGroupName')), createArray(parameters('hostPoolResourceGroupName'), parameters('sessionHostsResourceGroupName')))]",
    "storageAccountName": "[replace(replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').storageAccounts), '-', '')]",
    "storagePrivateDnsZoneResourceIds": [
      "[parameters('azureBlobsPrivateDnsZoneResourceId')]",
      "[parameters('azureFilesPrivateDnsZoneResourceId')]",
      "[parameters('azureQueuesPrivateDnsZoneResourceId')]",
      "[parameters('azureTablesPrivateDnsZoneResourceId')]"
    ],
    "storageSubResources": [
      "blob",
      "file",
      "queue",
      "table"
    ],
    "userAssignedIdentityName": "[replace(variables('namingConvention'), 'resourceType', variables('resourceTypes').userAssignedIdentities)]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('userAssignedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(variables('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', resourceGroup().id)]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enablePurgeProtection": true,
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": []
        },
        "publicNetworkAccess": "Disabled",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "softDeleteRetentionInDays": "[if(or(equals(parameters('environmentAbbreviation'), 'dev'), equals(parameters('environmentAbbreviation'), 'test')), 7, 90)]",
        "tenantId": "[subscription().tenantId]"
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-04-01",
      "name": "[replace(variables('privateEndpointName'), 'subType', 'kv')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
      "properties": {
        "customNetworkInterfaceName": "[replace(variables('networkInterfaceName'), 'subType', 'kv')]",
        "privateLinkServiceConnections": [
          {
            "name": "[replace(variables('privateEndpointName'), 'subType', 'kv')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ],
        "subnet": {
          "id": "[parameters('privateEndpointsSubnetResourceId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', replace(variables('privateEndpointName'), 'subType', 'kv'), variables('keyVaultName'))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', replace(variables('privateEndpointName'), 'subType', 'kv'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'StorageEncryptionKey')]",
      "properties": {
        "attributes": {
          "enabled": true
        },
        "keySize": 4096,
        "kty": "RSA",
        "rotationPolicy": {
          "attributes": {
            "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
          },
          "lifetimeActions": [
            {
              "action": {
                "type": "Notify"
              },
              "trigger": {
                "timeBeforeExpiry": "P10D"
              }
            },
            {
              "action": {
                "type": "Rotate"
              },
              "trigger": {
                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject())]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')))]": {}
        }
      },
      "properties": {
        "accessTier": "Hot",
        "allowBlobPublicAccess": false,
        "allowCrossTenantReplication": false,
        "allowedCopyScope": "PrivateLink",
        "allowSharedKeyAccess": true,
        "azureFilesIdentityBasedAuthentication": {
          "directoryServiceOptions": "None"
        },
        "defaultToOAuthAuthentication": false,
        "dnsEndpointType": "Standard",
        "encryption": {
          "identity": {
            "userAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]"
          },
          "requireInfrastructureEncryption": true,
          "keyvaultproperties": {
            "keyvaulturi": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2022-07-01').vaultUri]",
            "keyname": "StorageEncryptionKey"
          },
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "table": {
              "keyType": "Account",
              "enabled": true
            },
            "queue": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.KeyVault"
        },
        "largeFileSharesState": "Disabled",
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Deny"
        },
        "publicNetworkAccess": "Disabled",
        "supportsHttpsTrafficOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'StorageEncryptionKey')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "properties": {
        "protocolSettings": {
          "smb": {
            "versions": "SMB3.1.1;",
            "authenticationMethods": "NTLMv2;",
            "channelEncryption": "AES-128-GCM;AES-256-GCM;"
          }
        },
        "shareDeleteRetentionPolicy": {
          "enabled": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', variables('fileShareName'))]",
      "properties": {
        "accessTier": "TransactionOptimized",
        "shareQuota": 5120,
        "enabledProtocols": "SMB"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountName'), 'default')]"
      ]
    },
    {
      "copy": {
        "name": "privateEndpoints_storage",
        "count": "[length(variables('storageSubResources'))]"
      },
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-04-01",
      "name": "[replace(variables('privateEndpointName'), 'subType', format('{0}-st', variables('storageSubResources')[copyIndex()]))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
      "properties": {
        "customNetworkInterfaceName": "[replace(variables('networkInterfaceName'), 'subType', format('{0}-st', variables('storageSubResources')[copyIndex()]))]",
        "privateLinkServiceConnections": [
          {
            "name": "[replace(variables('privateEndpointName'), 'subType', format('{0}-st', variables('storageSubResources')[copyIndex()]))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "groupIds": [
                "[variables('storageSubResources')[copyIndex()]]"
              ]
            }
          }
        ],
        "subnet": {
          "id": "[parameters('privateEndpointsSubnetResourceId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "privateDnsZoneGroups_storage",
        "count": "[length(variables('storageSubResources'))]"
      },
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', replace(variables('privateEndpointName'), 'subType', format('{0}-st', variables('storageSubResources')[copyIndex()])), variables('storageAccountName'))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateDnsZoneId": "[variables('storagePrivateDnsZoneResourceIds')[copyIndex()]]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', replace(variables('privateEndpointName'), 'subType', format('{0}-st', variables('storageSubResources')[copyIndex()])))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', variables('storageAccountName'), 'default')]",
      "name": "[replace(variables('diagnosticsSettingName'), 'subType', 'blob-st')]",
      "properties": {
        "logs": [
          {
            "category": "StorageWrite",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "Transaction",
            "enabled": true
          }
        ],
        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Insights/components'), parameters('tags')['Microsoft.Insights/components'], createObject())]",
      "properties": {
        "Application_Type": "web"
      },
      "kind": "web"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Web/serverfarms'), parameters('tags')['Microsoft.Web/serverfarms'], createObject())]",
      "sku": {
        "tier": "ElasticPremium",
        "name": "EP1"
      },
      "kind": "functionapp",
      "properties": {
        "targetWorkerSizeId": 3,
        "targetWorkerCount": 1,
        "maximumElasticWorkerCount": 20,
        "zoneRedundant": false
      },
      "dependsOn": [
        "privateDnsZoneGroups_storage",
        "privateEndpoints_storage"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Web/sites'), parameters('tags')['Microsoft.Web/sites'], createObject())]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "publicNetworkAccess": "Disabled",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, environment().suffixes.storage)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, environment().suffixes.storage)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('fileShareName')]"
            },
            {
              "name": "BeginPeakTime",
              "value": "[parameters('beginPeakTime')]"
            },
            {
              "name": "EndPeakTime",
              "value": "[parameters('endPeakTime')]"
            },
            {
              "name": "EnvironmentName",
              "value": "[environment().name]"
            },
            {
              "name": "HostPoolName",
              "value": "[parameters('hostPoolName')]"
            },
            {
              "name": "HostPoolResourceGroupName",
              "value": "[parameters('hostPoolResourceGroupName')]"
            },
            {
              "name": "LimitSecondsToForceLogOffUser",
              "value": "[parameters('limitSecondsToForceLogOffUser')]"
            },
            {
              "name": "LogOffMessageBody",
              "value": "This session is about to be logged off. Please save your work."
            },
            {
              "name": "LogOffMessageTitle",
              "value": "Session Log Off"
            },
            {
              "name": "MaintenanceTagName",
              "value": "Maintenance"
            },
            {
              "name": "MinimumNumberOfRDSH",
              "value": "[parameters('minimumNumberOfRdsh')]"
            },
            {
              "name": "ResourceManagerUrl",
              "value": "[environment().resourceManager]"
            },
            {
              "name": "SessionThresholdPerCPU",
              "value": "[parameters('sessionThresholdPerCPU')]"
            },
            {
              "name": "SubscriptionId",
              "value": "[subscription().subscriptionId]"
            },
            {
              "name": "TenantId",
              "value": "[subscription().tenantId]"
            },
            {
              "name": "TimeDifference",
              "value": "[variables('locations')[parameters('location')].timeDifference]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[environment().portal]"
            ]
          },
          "ftpsState": "FtpsOnly",
          "netFrameworkVersion": "v6.0",
          "powerShellVersion": "7.2",
          "use32BitWorkerProcess": false
        },
        "virtualNetworkSubnetId": "[parameters('delegatedSubnetResourceId')]",
        "vnetContentShareEnabled": true,
        "vnetRouteAllEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-04-01",
      "name": "[replace(variables('privateEndpointName'), 'subType', 'fa')]",
      "location": "[parameters('location')]",
      "properties": {
        "customNetworkInterfaceName": "[replace(variables('networkInterfaceName'), 'subType', 'fa')]",
        "privateLinkServiceConnections": [
          {
            "name": "[replace(variables('privateEndpointName'), 'subType', 'fa')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ],
        "subnet": {
          "id": "[parameters('privateEndpointsSubnetResourceId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', replace(variables('privateEndpointName'), 'subType', 'fa'), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateDnsZoneId": "[parameters('azureFunctionsPrivateDnsZoneResourceId')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', replace(variables('privateEndpointName'), 'subType', 'fa'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionName'))]",
      "properties": {
        "config": {
          "disabled": false,
          "bindings": [
            {
              "name": "Timer",
              "type": "timerTrigger",
              "direction": "in",
              "schedule": "0 */15 * * * *"
            }
          ]
        },
        "files": {
          "requirements.psd1": "[variables('$fxv#2')]",
          "run.ps1": "[variables('$fxv#3')]",
          "../profile.ps1": "[variables('$fxv#4')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', replace(variables('privateEndpointName'), 'subType', 'fa'), 'default')]",
        "[resourceId('Microsoft.Network/privateEndpoints', replace(variables('privateEndpointName'), 'subType', 'fa'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PrivateLinkScope_{0}', parameters('timestamp'))]",
      "subscriptionId": "[variables('privateLinkScopeSubscriptionId')]",
      "resourceGroup": "[variables('privateLinkScopeResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('applicationInsightsName')]"
          },
          "applicationInsightsResourceId": {
            "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
          },
          "privateLinkScopeResourceId": {
            "value": "[parameters('privateLinkScopeResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "7626274648984515306"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string"
            },
            "applicationInsightsResourceId": {
              "type": "string"
            },
            "privateLinkScopeResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], parameters('applicationInsightsName'))]",
              "properties": {
                "linkedResourceId": "[parameters('applicationInsightsResourceId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "copy": {
        "name": "roleAssignments_ResourceGroups",
        "count": "[length(range(0, length(variables('roleAssignments'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RoleAssignment_{0}_{1}', variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]], parameters('timestamp'))]",
      "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01', 'full').identity.principalId]"
          },
          "RoleDefinitionId": {
            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "13011554662180100232"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            },
            "RoleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    }
  ]
}